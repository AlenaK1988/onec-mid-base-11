
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Доработка 30.10.24 вывод на форму реквизита Скидка и команды Пересчитать
	ВывестиРеквизитыНаФормуПрограммно();
	// конец
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСтроки(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РассчитатьСуммуСтроки(ТекущиеДанные)
	
	СуммаСкидок = ТекущиеДанные.Скидка + Объект.Нето_СогласованнаяСкидка;
	Если СуммаСкидок <= 100 Тогда
		СуммаСкидокЗаЕдиницу = (ТекущиеДанные.Цена / 100) * СуммаСкидок;
		ТекущиеДанные.Сумма = (ТекущиеДанные.Цена - СуммаСкидокЗаЕдиницу) * ТекущиеДанные.Количество; 
	Иначе
		ТекущиеДанные.Сумма = 0; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон("По позиции %1.%2 сумма скидок превышает 100%%", 
		ТекущиеДанные.НомерСтроки, ТекущиеДанные.Номенклатура));	    
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиРеквизитыНаФормуПрограммно()
	
	// вывод реквизита СогласованнаяСкидка и команды Пересчитать
	ГруппаШапкаЛево = Элементы.Найти("ГруппаШапкаЛево");
	ГруппаСкидка = Элементы.Добавить("ГруппаСкидка", Тип("ГруппаФормы"), ГруппаШапкаЛево);
	ГруппаСкидка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСкидка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	РеквизитСкидка = Элементы.Добавить("Нето_СогласованнаяСкидка", Тип("ПолеФормы"),ГруппаСкидка); 
	РеквизитСкидка.ПутьКДанным = "Объект.Нето_СогласованнаяСкидка";
	РеквизитСкидка.Вид = ВидПоляФормы.ПолеВвода;
	РеквизитСкидка.Заголовок = "Согласованная скидка";
	РеквизитСкидка.УстановитьДействие("ПриИзменении", "ПересчетСуммыСоСкидкой");
	
	КомандаПересчитатьСУчетомСкидки = Команды.Добавить("КЛ_ПересчитатьСУчетомСкидки");
	КомандаПересчитатьСУчетомСкидки.Заголовок = "Пересчитать с учетом скидки";
	КомандаПересчитатьСУчетомСкидки.Действие = "КомандаКЛ_ПересчитатьСУчетомСкидки";
	//КомандаПересчитатьСУчетомСкидки.Действие = "КомандаКЛ_ПересчитатьСУчетомСкидки";
	КнопкаФормыПересчитать = Элементы.Добавить("КнопкаКЛ_ПересчитатьСУчетомСкидки", Тип("КнопкаФормы"),ГруппаСкидка); 
	КнопкаФормыПересчитать.ИмяКоманды = "КЛ_ПересчитатьСУчетомСкидки";
	КнопкаФормыПересчитать.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	//--конец доработки

КонецПроцедуры

&НаКлиенте
Процедура КомандаКЛ_ПересчитатьСУчетомСкидки()
//++ ДЗ Изменение конфигурации 30.10.24  
	Если ЗначениеЗаполнено(Объект.Товары) Или ЗначениеЗаполнено(Объект.Услуги) Тогда
		ПересчитатьТаблицуСоСкидкой();
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Табличные данные не заполнены");
	КонецЕсли;
// конец	
КонецПроцедуры


&НаКлиенте
Асинх Процедура ПересчетСуммыСоСкидкой()
	
//Доработка 30.10.24 	
	ВопросПользователю = "Пересчитать сумму с учетом скидки?";
	ОтветПользователя = Новый СписокЗначений;
	ОтветПользователя.Вставить(0, "Да, пересчитать");
	ОтветПользователя.Вставить(1, "Нет, не пересчитывать");
			
	ВыборОтвета = Ждать ВопросАсинх(ВопросПользователю, ОтветПользователя);
	
	Если ВыборОтвета = "Нет, не пересчитывать" Тогда
		Возврат;
		
	ИначеЕсли ВыборОтвета = "Да, пересчитать" Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Товары) И Не ЗначениеЗаполнено(Объект.Услуги) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Необходимо заполнить табличную часть");
		Иначе
			 ПересчитатьТаблицуСоСкидкой();
		КонецЕсли;
	КонецЕсли;
// конец 	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьТаблицуСоСкидкой()
	//Доработка 30.10.24 		
	Для Каждого ТекущиеДанные Из Объект.Товары Цикл
			РассчитатьСуммуСтроки(ТекущиеДанные);
	КонецЦикла;
	
	Для Каждого ТекущиеДанные Из Объект.Услуги Цикл
			РассчитатьСуммуСтроки(ТекущиеДанные);
	КонецЦикла;
	РассчитатьСуммуДокумента();	
	// конец	
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти


